README for Project 1 Part 3: Monte Carlo Tree Search (MCTS) Task Tree Extraction

Overview

This project implements a Monte Carlo Tree Search (MCTS) algorithm to extract task trees from a Functional Object-Oriented Network (FOON). The task tree represents the sequence of steps required to prepare a dish using the available ingredients and utensils in the kitchen.

The program reads the kitchen state, goal objects, and FOON data (from FOON.txt), then generates task trees using MCTS, where each tree outlines the steps needed to produce a specified goal object in FOON. The preprocess.py script is used to convert the FOON text data into a more efficient FOON.pkl file format.

Features:

- Monte Carlo Tree Search (MCTS): 
   - Simulates multiple executions of functional units (FUs) to generate task trees for given goal objects.
   - Uses the UCB1 formula to balance exploitation (selecting FUs with high success rates) and exploration (trying lesser-used FUs).
- Task Tree Generation: The task tree is saved into a .txt file for each goal object, providing a structured sequence of steps to create the dish.

Input Files:

The program requires the following input files:
1. FOON data file (FOON.txt): Contains the structure of the FOON, including functional units and object nodes, in text format. This file will be converted to FOON.pkl using the preprocess.py script.
2. FOON data file (FOON.pkl): This binary file is generated by running preprocess.py on FOON.txt.
3. Kitchen items file (kitchen.json): Lists the ingredients and utensils available in the kitchen.
4. Goal nodes file (goal_nodes.json): Specifies the goal objects (object name, state, ingredients, and container) to search for and create.
5. Utensils file (utensils.txt): Lists the available utensils in the kitchen.
6. Motion success rates file (motion.txt): Contains the success rates for each functional unit.
7. Preprocessing file (preprocess.py): A utility script that converts FOON.txt into FOON.pkl for faster processing.

Output:

- The program generates task trees for each goal object and saves them into separate .txt files.
- Each output file is named output_MCTS_<goal>.txt, where <goal> is replaced by the name of the goal object.

If a goal node does not exist in FOON, the program will print a message indicating that the goal node was not found.

Project Files:

1. preprocess.py: Converts the FOON data from FOON.txt to FOON.pkl.
2. search_MCTS.py: Contains the implementation of the Monte Carlo Tree Search (MCTS) algorithm.
3. test_script.py: A test script that reads the output files and displays the generated task trees.
4. FOON.txt: The FOON structure stored as a plain text file.
5. FOON.pkl: The FOON structure stored as a binary pickle file, generated by preprocess.py.
6. kitchen.json: JSON file containing the available kitchen items and utensils.
7. goal_nodes.json: JSON file specifying the goal objects to be created.
8. utensils.txt: A text file listing the available utensils in the kitchen.
9. motion.txt: A tab-separated file containing the success rates for functional units.

How to Run the Program:

1. Install Required Packages:

Ensure that you have Python 3 installed. The following Python packages are required, all of which are included in Python 3:

- pickle
- json
- random
- math

No external Python packages are required for this project.

2. Preprocessing Step:

The first step is to preprocess the FOON data by converting FOON.txt into FOON.pkl. This is done using the preprocess.py script.

Steps to Execute Preprocessing:

1. Ensure that FOON.txt is in the same directory as preprocess.py.
2. Run the preprocess.py script:
   
   python preprocess.py
   
3. This will generate the FOON.pkl file, which will be used by the main MCTS algorithm.

3. Running the Main Program:

The main functionality is implemented in the search_MCTS.py script, which generates task trees based on input data and saves the trees into .txt files. The test_script.py script can be used to display the generated task trees.

Steps to Execute:

1. Ensure that the following input files are in the same directory as search_MCTS.py:
   - FOON.pkl (generated from FOON.txt using preprocess.py)
   - kitchen.json
   - goal_nodes.json
   - utensils.txt
   - motion.txt

2. Run search_MCTS.py to generate the task trees:
   
   python search_MCTS.py
   

3. Once the task trees are generated and saved, you can view the output using test_script.py:
   
   python test_script.py
   

This script will read the saved task tree files and print them to the console.

Example:

For a goal node such as "whipped cream", the output will include:
- Output: 
  - output_MCTS_whipped_cream.txt: Task tree generated using MCTS.

Project Structure:

.
├── preprocess.py                 # Preprocessing script to generate FOON.pkl from FOON.txt
├── search_MCTS.py                # Main script implementing MCTS
├── test_script.py                # Test script for displaying task tree output
├── FOON.txt                      # FOON data in text format
├── FOON.pkl                      # FOON data in pickle format, generated from FOON.txt
├── kitchen.json                  # Kitchen items (input)
├── goal_nodes.json               # Goal objects (input)
├── utensils.txt                  # Available utensils (input)
├── motion.txt                    # Success rates for functional units (input)
└── output_MCTS_<goal>.txt        # Task tree output from MCTS (generated)

Notes:

- Ensure that the input files (FOON.txt, FOON.pkl, kitchen.json, goal_nodes.json, utensils.txt, motion.txt, and preprocess.py) are in the correct format. The .pkl file is generated by running preprocess.py on FOON.txt, and the .json files must be correctly formatted.
- The motion.txt file should be a tab-separated file that specifies the success rates for each functional unit.

